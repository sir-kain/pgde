<?php

namespace Pgde\EmploiBundle\Repository;

/**
 * UserdataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserdataRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get either a Gravatar URL or complete image tag for a specified email address.
     *
     * @param string $email The email address
     * @param int|string $s Size in pixels, defaults to 80px [ 1 - 2048 ]
     * @param string $d Default imageset to use [ 404 | mm | identicon | monsterid | wavatar ]
     * @param string $r Maximum rating (inclusive) [ g | pg | r | x ]
     * @param bool $img True to return a complete IMG tag False for just the URL
     * @param array $atts Optional, additional key/value attributes to include in the IMG tag
     * @return String containing either just a URL or a complete image tag
     * @source https://gravatar.com/site/implement/images/php/
     */
    public function get_gravatar( $email, $s = 25, $d = 'mm', $r = 'g', $img = false, $atts = array() ) {
        $url = 'https://www.gravatar.com/avatar/';
        $url .= md5( strtolower( trim( $email ) ) );
        $url .= "?s=$s&d=$d&r=$r";
        if ( $img ) {
            $url = '<img src="' . $url . '"';
            foreach ( $atts as $key => $val )
                $url .= ' ' . $key . '="' . $val . '"';
            $url .= ' />';
        }
        return $url;
    }

    public function checkEmail($email) {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare('
                SELECT u.id
                FROM utilisateur u
                WHERE u.email = :email
            ');

        $statement->bindValue('email', $email);
        $statement->execute();
         $res = $statement->fetchColumn();
        return $res;
    }

    /**
     * @param \DateTime $date
     * @return bool
     */
    public function checkDateNaiss(\DateTime $date) {
        $age = date_diff($date, new \DateTime())->y;
        if ($age < 18) {
            return false;
        }
        return true;
    }

    public function inscriptionIncomplete() {
        $cnx = $this->_em->getConnection();
        $statement1 = $cnx->prepare('
                SELECT COUNT( ud.id ) 
                FROM userdata ud
                WHERE ud.emploi1_id IS NULL
            ');
        $statement1->execute();
        $res1 = $statement1->fetchColumn();
        $statement2 = $cnx->prepare('
                SELECT COUNT( u.id ) 
                FROM utilisateur u
                WHERE u.id NOT 
                IN (
                SELECT utilisateur_id
                FROM userdata
                )
            ');
        $statement2->execute();
        $res2 = $statement2->fetchColumn();

        return $res1 + $res2;
    }

    public function demandeursValide() {
        $cnx = $this->_em->getConnection();
        $statement = $cnx->prepare('
                SELECT COUNT(u.id)
                FROM userdata u
                WHERE u.emploi1_id IS NOT NULL 
            ');
        $statement->execute();
        $res = $statement->fetchColumn();
        return $res;
    }
}
